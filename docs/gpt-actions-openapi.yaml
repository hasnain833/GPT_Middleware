openapi: 3.1.0
info:
  title: Excel GPT Middleware API
  version: 1.0.0
  description: |
    Serverless Express endpoints for interacting with Microsoft Graph Excel via a middleware.
    All endpoints respond with a consistent envelope: { success: boolean, data?: any, error?: string }.
servers:
  - url: https://your-deployment-url.com
    description: Production
  - url: http://localhost:3000
    description: Local (vercel dev or local server)
paths:
  /health:
    get:
      summary: Health check
      operationId: getHealth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeSuccess'
  /list-drives:
    get:
      summary: List drives
      operationId: listDrives
      responses:
        '200':
          description: List success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeSuccess'
  /list-items:
    get:
      summary: List items in a drive
      operationId: listItems
      parameters:
        - in: query
          name: driveName
          schema:
            type: string
          required: true
          description: Drive name (e.g., Shared Documents)
      responses:
        '200':
          description: List success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeSuccess'
  /excel/read:
    post:
      summary: Read a range from a worksheet
      operationId: readExcelRange
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadRequest'
            examples:
              byNames:
                summary: Using driveName/itemName and sheet-qualified range
                value:
                  driveName: Shared Documents
                  itemName: TestWorkbook.xlsx
                  range: Sheet1!A1:D10
      description: |
        Provide either driveName/itemName. Name matching is case-insensitive. If a name is not found, the API returns a 404 with an error listing available names.
      responses:
        '200':
          description: Read success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeSuccess'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
        '404':
          description: Drive or file not found (returns available names)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
        '500':
          description: Server or Graph error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
  /excel/write:
    post:
      summary: Write values to a range in a worksheet
      operationId: writeExcelRange
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteRequest'
            examples:
              byNames:
                summary: Using driveName/itemName and sheet-qualified range
                value:
                  driveName: Shared Documents
                  itemName: TestWorkbook.xlsx
                  range: Sheet1!A1:B2
                  values:
                    - ["Date", "Amount"]
                    - ["2025-09-01", 100]
      description: |
        Provide either driveName/itemName. Name matching is case-insensitive. If a name is not found, the API returns a 404 with an error listing available names.
      responses:
        '200':
          description: Write success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeSuccess'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
        '500':
          description: Server or Graph error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
  /excel/create-sheet:
    post:
      summary: Create a worksheet in a workbook
      operationId: createWorksheet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSheetRequest'
            examples:
              byNames:
                value:
                  driveName: Shared Documents
                  itemName: TestWorkbook.xlsx
                  name: NewSheet
      responses:
        '200':
          description: Create sheet success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeSuccess'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
        '500':
          description: Server or Graph error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
  /excel/delete-sheet:
    delete:
      summary: Delete a worksheet by name
      operationId: deleteWorksheet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSheetRequest'
            examples:
              byNames:
                value:
                  driveName: Shared Documents
                  itemName: TestWorkbook.xlsx
                  sheetName: OldSheet
      responses:
        '200':
          description: Delete sheet success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeSuccess'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
        '500':
          description: Server or Graph error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
  /excel/delete:
    post:
      summary: Clear data in a range
      operationId: clearRange
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
            examples:
              byNames:
                value:
                  driveName: Shared Documents
                  itemName: TestWorkbook.xlsx
                  sheetName: Sheet1
                  range: A1:B10
                  applyTo: contents
      responses:
        '200':
          description: Clear success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeSuccess'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
        '500':
          description: Server or Graph error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeError'
components:
  schemas:
    EnvelopeSuccess:
      type: object
      properties:
        success:
          type: boolean
          const: true
        data:
          description: Response payload from the middleware or Graph API
    EnvelopeError:
      type: object
      properties:
        success:
          type: boolean
          const: false
        error:
          type: string
    ReadRequest:
      type: object
      description: Provide driveName/itemName. Worksheet can be specified via worksheetName or as a Sheet! prefix in range.
      properties:
        driveName:
          type: string
          description: Drive name (e.g., Shared Documents)
        itemName:
          type: string
          description: File name (e.g., TestWorkbook.xlsx)
        worksheetName:
          type: string
          description: Worksheet name; if omitted, you can prefix the range like Sheet1!A1:D10
        range:
          type: string
          description: Range address such as A1:C10 or Sheet1!A1:C10
      required: [driveName, itemName, range]
    WriteRequest:
      type: object
      description: Provide driveName/itemName. Worksheet can be specified via worksheetName or as a Sheet! prefix in range.
      properties:
        driveName:
          type: string
        itemName:
          type: string
        worksheetName:
          type: string
        range:
          type: string
        values:
          type: array
          description: 2D array of values to write
          items:
            type: array
            items: {}
      required: [driveName, itemName, range, values]
    CreateSheetRequest:
      type: object
      properties:
        driveName:
          type: string
        itemName:
          type: string
        name:
          type: string
      required: [driveName, itemName, name]
      examples:
        - driveName: Documents
          itemName: TestWorkbook.xlsx
          name: NewSheet
    DeleteRequest:
      type: object
      properties:
        driveName:
          type: string
        itemName:
          type: string
        sheetName:
          type: string
        range:
          type: string
        applyTo:
          type: string
          description: Defaults to 'contents'. Other options include 'formats', 'hyperLinks', etc.
          default: contents
      required: [driveName, itemName, sheetName, range]
      examples:
        - driveName: Documents
          itemName: TestWorkbook.xlsx
          sheetName: Sheet1
          range: A1:B10
          applyTo: contents
    DeleteSheetRequest:
      type: object
      properties:
        driveName:
          type: string
        itemName:
          type: string
        sheetName:
          type: string
      required: [driveName, itemName, sheetName]
